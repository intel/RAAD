#!/usr/bin/python3
# -*- coding: utf-8 -*-
# *****************************************************************************/
# * Authors: Randal Eike, Joseph Tarango
# *****************************************************************************/
"""
Brief:
    intelObjectIdList.py - Telemetry object unique identification number list

Description:
    -

Classes:
    Enter GetHeaders("intelObjectIdList.py") to display Class listings.
"""
from __future__ import absolute_import, division, print_function, unicode_literals  # , nested_scopes, generators, generator_stop, with_statement, annotations
debug = 0
eventDumpNumber = [0, 0, 0, 0]
from src.software.parse.telemetry_util import openWriteFile
from src.software.parse.output_log import OutputLog

# Telemetry log type version 2.0 enumeration.
TELEMETRYLIST_DEFAULT = [
                # Id, Instance, Class Type, major, minor, byte size.
                (0, "assertdump", 0, 0, 0),
                (1, "FwSideTrace", 0, 0, 0),
                (2, "BlSideTrace", 0, 0, 0),
                (3, "Nlog", 0, 0, 0),
                (4, "dpEventDump", 0, 0, 0),
                (5, "bis", 0, 0, 0),
                (6, "ThermalSensor", 0, 0, 0),
                (7, "smartPowerOnSnapshot", 0, 0, 0),
                (8, "ThermalStats", 0, 0, 0),
                (9, "LLFState", 0, 0, 0),
                (10, "initState", 0, 0, 0),
                (11, "LEDStatus", 0, 0, 0),
                (12, "mNmiMsg", 0, 0, 0),
                (13, "preCoreStatsHolder", 0, 0, 0),
                (14, "coreStatsHolder", 0, 0, 0),
                (15, "mFlowCtl", 0, 0, 0),
                (16, "transportStats", 0, 0, 0),
                (17, "pssDebugTrace", 0, 0, 0),
                (18, "mMiCmdCtx", 0, 0, 0),
                (19, "tapStats", 0, 0, 0),
                (20, "NplCmdStateInfo", 0, 0, 0),
                (21, "mMicp", 0, 0, 0),
                (22, "mMicInfo", 0, 0, 0),
                (23, "mMiEventCtx", 0, 0, 0),
                (24, "mMiEventCtxDisableSecRevChk", 0, 0, 0),
                (25, "mMiEventCtxFwUpdateLock", 0, 0, 0),
                (26, "mMiEvntCtxFwUpd", 0, 0, 0),
                (27, "mCfg", 0, 0, 0),
                (28, "coreInfo", 0, 0, 0),
                (29, "mMiMicpEvent", 0, 0, 0),
                (30, "mMiCmdCfg", 0, 0, 0),
                (31, "mMiNmiEvent", 0, 0, 0),
                (32, "mMiCmdResp", 0, 0, 0),
                (33, "mMiMctrlEvent", 0, 0, 0),
                (34, "mDebugStartTime", 0, 0, 0),
                (35, "mmIoAddr", 0, 0, 0),
                (36, "mMiTapEvents", 0, 0, 0),
                (37, "mNmiMoreTimeDelay", 0, 0, 0),
                (38, "mpDispState", 0, 0, 0),
                (39, "mpProcState", 0, 0, 0),
                (40, "mpState", 0, 0, 0),
                (41, "defragHistory", 0, 0, 0),
                (42, "Defrag_MissedRelos", 0, 0, 0),
                (43, "Arbiter", 0, 0, 0),
                (44, "DefragInfoSlow", 0, 0, 0),
                (45, "Defrag_DustingQueue", 0, 0, 0),
                (46, "Defrag_LockedQueue", 0, 0, 0),
                (47, "Defrag_WAQueue", 0, 0, 0),
                (48, "Defrag_WearLevelQueue", 0, 0, 0),
                (49, "DefragInfo", 0, 0, 0),
                (50, "Defrag_BandsDoneQueue", 0, 0, 0),
                (51, "Defrag_HistoricDustMixRate", 0, 0, 0),
                (52, "DefragStateCounters", 0, 0, 0),
                (53, "leftOver", 0, 0, 0),
                (54, "Defrag_ForcedReloQ", 0, 0, 0),
                (55, "readLatencyStats", 0, 0, 0),
                (56, "writeLatencyStats", 0, 0, 0),
                (57, "NandDiscovery", 0, 0, 0),
                (58, "fConfigInfoTable", 0, 0, 0),
                (59, "factoryConfig", 0, 0, 0),
                (60, "PliHeader", 0, 0, 0),
                (61, "PliRestoreHeader", 0, 0, 0),
                (62, "PliSaveHeader", 0, 0, 0),
                (63, "PliFooter", 0, 0, 0),
                (64, "PliRestoreFooter", 0, 0, 0),
                (65, "PliSaveFooter", 0, 0, 0),
                (66, "PliRestoreCompleter", 0, 0, 0),
                (67, "bandObjectsExt", 0, 0, 0),
                (68, "mMaster", 0, 0, 0),
                (69, "mSlave", 0, 0, 0),
                (70, "mPacket", 0, 0, 0),
                (71, "mNbm", 0, 0, 0),
                (72, "mCmdProc", 0, 0, 0),
                (73, "mRespProc", 0, 0, 0),
                (74, "mMctrlPacket", 0, 0, 0),
                (75, "mWrReq", 0, 0, 0),
                (76, "mFwDownldMeta", 0, 0, 0),
                (77, "mNvmSubSysHealth", 0, 0, 0),
                (78, "mRdReq", 0, 0, 0),
                (79, "mNvmCtrlHealth", 0, 0, 0),
                (80, "mMctpMsgBldr", 0, 0, 0),
                (81, "mClrCmpCtrlStatus", 0, 0, 0),
                (82, "mCmpCtrlStatus", 0, 0, 0),
                (83, "mFlowCtlStatus", 0, 0, 0),
                (84, "mRunTimeSmbAddress", 0, 0, 0),
                (85, "trimEntriesBuffer", 0, 0, 0),
                (86, "mrr_log", 0, 0, 0),
                (87, "tcm_queues", 0, 0, 0),
                (88, "Stats", 0, 0, 0),
                (89, "mrr_state", 0, 0, 0),
                (90, "WSM_Info", 0, 0, 0),
                (91, "mrr_successDistribution", 0, 0, 0),
                (92, "EnduranceMgr", 0, 0, 0),
                (93, "tll_cache_manager", 0, 0, 0),
                (94, "ReadDisturb", 0, 0, 0),
                (95, "buffer_targets", 0, 0, 0),
                (96, "backEndStats", 0, 0, 0),
                (97, "mrr_AuditTimeMs", 0, 0, 0),
                (98, "nlogBufPool", 0, 0, 0),
                (99, "nlogPoolPliLogs", 0, 0, 0),
                (100, "nlogStat", 0, 0, 0),
                (101, "nlogSelect", 0, 0, 0),
                (102, "nlogPliLogs", 0, 0, 0),
                (103, "nlogPoolPliLogsPtr", 0, 0, 0),
                (104, "nlogEventCounter", 0, 0, 0),
                (105, "nlogPausedNlogs", 0, 0, 0),
                (106, "nlogHostLogPtr", 0, 0, 0),
                (107, "ABT_Stack", 0, 0, 0),
                (108, "fwRevision", 0, 0, 0),
                (109, "mrr_status", 0, 0, 0),
                (110, "PliRestoreState", 0, 0, 0),
                (111, "stackXORRecovery", 0, 0, 0),
                (112, "stackDefrag", 0, 0, 0),
                (113, "stackHalSvc", 0, 0, 0),
                (114, "stackWriteCache", 0, 0, 0),
                (115, "stackXportCmdDisp", 0, 0, 0),
                (116, "stackContextTask", 0, 0, 0),
                (117, "stackSecurityTask", 0, 0, 0),
                (118, "stackServiceTask", 0, 0, 0),
                (119, "stackCoreDispatch", 0, 0, 0),
                (120, "stackXfer", 0, 0, 0),
                (121, "IRQ_Stack", 0, 0, 0),
                (122, "XORinfo", 0, 0, 0),
                (123, "ReadDisturb_MrrNearMissQueue", 0, 0, 0),
                (124, "stackCoreComplete", 0, 0, 0),
                (125, "stackIdle", 0, 0, 0),
                (126, "PliWriteStream", 0, 0, 0),
                (127, "nandReadWriteWorkStack", 0, 0, 0),
                (128, "SYS_Stack", 0, 0, 0),
                (129, "Xor_Hw_Info", 0, 0, 0),
                (130, "HalCpu_ResetStack1", 0, 0, 0),
                (131, "HalCpu_ResetStack2", 0, 0, 0),
                (132, "PliSideTraceCoreDataInAssertDump", 0, 0, 0),
                (133, "pliSideTraceStackDump", 0, 0, 0),
                (134, "PMIC_REGS", 0, 0, 0),
                (135, "nandSyncLock", 0, 0, 0),
                (136, "assertDumpFindGate", 0, 0, 0),
                (137, "assertGate", 0, 0, 0),
                (138, "assertRecoveryGate", 0, 0, 0),
                (139, "burninGate", 0, 0, 0),
                (140, "capChargeGate", 0, 0, 0),
                (141, "cdmEraseGate", 0, 0, 0),
                (142, "correctorGate", 0, 0, 0),
                (143, "cpuifInitGate", 0, 0, 0),
                (144, "cpuifRstGate", 0, 0, 0),
                (145, "dramEccGate", 0, 0, 0),
                (146, "gate", 0, 0, 0),
                (147, "llfEraseGate", 0, 0, 0),
                (148, "llrInitGate", 0, 0, 0),
                (149, "nandPhyRstGate", 0, 0, 0),
                (150, "pliConditionalWriteCompleterGate", 0, 0, 0),
                (151, "pliGate", 0, 0, 0),
                (152, "pliNandQuiesceGate", 0, 0, 0),
                (153, "pliNandResetGate", 0, 0, 0),
                (154, "pliWriteCompleterGate", 0, 0, 0),
                (155, "powerGovGate", 0, 0, 0),
                (156, "preSlowCtxGate", 0, 0, 0),
                (157, "relaySelectSyncGate", 0, 0, 0),
                (158, "startUpGate", 0, 0, 0),
                (159, "temperatureGate", 0, 0, 0),
                (160, "wpGate", 0, 0, 0),
                (161, "xorInitGate", 0, 0, 0),
                (162, "TransIcmdReservedReuseStack", 0, 0, 0),
                (163, "ActiveTaskStackPointer", 0, 0, 0),
                (164, "assertGateUnlock", 0, 0, 0),
                (165, "PliBandEraseState", 0, 0, 0),
                (166, "warmResetGateUnlock", 0, 0, 0),
                (167, "pliSaveState", 0, 0, 0),
                (168, "dm", 0, 0, 0),
                (169, "pssRegs", 0, 0, 0),
                (170, "Xor_DebugLog", 0, 0, 0),
                (171, "pCmdCtxList", 0, 0, 0),
                (172, "dmaDescMsgs", 0, 0, 0),
                (173, "Nei", 0, 0, 0),
                (174, "iCmdPtrList", 0, 0, 0),
                (175, "PsrInfo", 0, 0, 0),
                (176, "nandTrimMgrInfo", 0, 0, 0),
                (177, "band_SeqInfo", 0, 0, 0),
                (178, "mrr_eventCounters", 0, 0, 0),
                (179, "mrr_refCache", 0, 0, 0),
                (180, "XORRecovery", 0, 0, 0),
                (181, "band_EraseInfo", 0, 0, 0),
                (182, "band_InvalidityInfo", 0, 0, 0),
                (183, "band_LinkedList", 0, 0, 0),
                (184, "band_PageCount", 0, 0, 0),
                (185, "bootProfileDRAM", 0, 0, 0),
                (186, "runningStatus", 0, 0, 0),
                (187, "InternalDataCmdDescPool", 0, 0, 0),
                (188, "band_EbCount", 0, 0, 0),
                (189, "band_StripeCount", 0, 0, 0),
                (190, "xorDebugStats", 0, 0, 0),
                (191, "SlowCtx", 0, 0, 0),
                (192, "bandPweInfo", 0, 0, 0),
                (193, "ProgStream", 0, 0, 0),
                (194, "PrefetchData", 0, 0, 0),
                (195, "SlowCtxDataArray", 0, 0, 0),
                (196, "NandChannelRegsDump", 0, 0, 0),
                (197, "WsmBandAbortLog", 0, 0, 0),
                (198, "band_State", 0, 0, 0),
                (199, "nplFaultInfo", 0, 0, 0),
                (200, "npsRegs", 0, 0, 0),
                (201, "dmtRegs", 0, 0, 0),
                (202, "Replay", 0, 0, 0),
                (203, "band_isCleanBand", 0, 0, 0),
                (204, "band_isDefragLockedForNandError", 0, 0, 0),
                (205, "band_isDefragLockedUntilCtxSave", 0, 0, 0),
                (206, "band_isXorEnabled", 0, 0, 0),
                (207, "InternalDataCmdDescFree", 0, 0, 0),
                (208, "dynamicWindow", 0, 0, 0),
                (209, "fwUpdState", 0, 0, 0),
                (210, "tbufInfo", 0, 0, 0),
                (211, "mrr_audit", 0, 0, 0),
                (212, "capTestInfo", 0, 0, 0),
                (213, "CtxRestoreTime", 0, 0, 0),
                (214, "SystemInfo", 0, 0, 0),
                (215, "mailBoxesToSave", 0, 0, 0),
                (216, "dramEccInfo", 0, 0, 0),
                (217, "LLFFormatProgress", 0, 0, 0),
                (218, "nplMmioInfo", 0, 0, 0),
                (219, "channelTimeout", 0, 0, 0),
                (220, "indConfig", 0, 0, 0),
                (221, "nplErrInfo", 0, 0, 0),
                (222, "SafeShutdownInfo", 0, 0, 0),
                (223, "nplCount", 0, 0, 0),
                (224, "PliCapInfo", 0, 0, 0),
                (225, "InitStateCoreSync", 0, 0, 0),
                (226, "LLFFormatProgressHost", 0, 0, 0),
                (227, "nplCore0Info", 0, 0, 0),
                (228, "nplCore1Info", 0, 0, 0),
                (229, "dmt_register_base", 0, 0, 0),
                (230, "nplTransInfo", 0, 0, 0),
                (231, "PMIC", 0, 0, 0),
                (232, "core0ChildMailboxItem", 0, 0, 0),
                (233, "core1ChildMailboxItem", 0, 0, 0),
                (234, "dlmRegs", 0, 0, 0),
                (235, "dmtDebug0", 0, 0, 0),
                (236, "dmtDebug1", 0, 0, 0),
                (237, "dmtDebug2", 0, 0, 0),
                (238, "REGS_NPL", 0, 0, 0),
                (239, "Xor_DebugLogIndex", 0, 0, 0),
                (240, "telemetry", 0, 0, 0),
                (241, "PliSideTracePayload", 0, 0, 0),
                (242, "SpiFlash", 0, 0, 0),
                (243, "PliSideTraceCoreData", 0, 0, 0),
                (244, "pliCriticalSectionStartAddr", 0, 0, 0),
                (245, "pliCoreSpecificFlags", 0, 0, 0),
                (246, "pssExtRegs", 0, 0, 0),
                (247, "nvmeFeatures", 0, 0, 0),
                (248, "bridgeInfo", 0, 0, 0),
                (249, "ERROR_249", 0, 0, 0),
                (250, "BridgeStatus", 0, 0, 0),
                (251, "nplInfoState", 0, 0, 0),
                (252, "qMgrCQList", 0, 0, 0),
                (253, "nplInfo", 0, 0, 0),
                (254, "qMgrSQList", 0, 0, 0),
                (255, "NplMailboxState", 0, 0, 0),
                (256, "NplCQueueRegisters", 0, 0, 0),
                (257, "NplSQueueRegisters", 0, 0, 0),
                (258, "DefragHistoryPart", 0, 0, 0),
                (259, "NLOG_ID", 0, 0, 0),
                (260, "NLOG_TEST", 0, 0, 0),
                (261, "NLOG_TC", 0, 0, 0),
                (262, "NLOG_DEBUG", 0, 0, 0),
                (263, "NLOG_TEMP", 0, 0, 0),
                (264, "NLOG_15M", 0, 0, 0),
                (265, "NLOG_10D", 0, 0, 0),
                (266, "NLOG_HOST", 0, 0, 0),
                (267, "NLOG_BG", 0, 0, 0),
                (268, "NLOG_UNIQUE", 0, 0, 0),
                (269, "NLOG_SYS", 0, 0, 0),
                (270, "NLOG_ERROR", 0, 0, 0),
                (271, "NLOG_PLI", 0, 0, 0),
                (272, "NLOG_IBM", 0, 0, 0),
                (273, "NLOG_STATS", 0, 0, 0),
                (274, "NLOG_TSTATS", 0, 0, 0),
                (275, "NLOG_HFR", 0, 0, 0),
                (276, "NLOG_EHOST", 0, 0, 0),
                (277, "NLOG_WARN", 0, 0, 0),
                (278, "NLOG_RARE", 0, 0, 0),
                (279, "NLOG_THERM", 0, 0, 0),
                (280, "NLOG_MRRf", 0, 0, 0),
                (281, "NLOG_UEC", 0, 0, 0),
                (282, "NLOG_TRIM", 0, 0, 0),
                (283, "NLOG_MRRs", 0, 0, 0),
                (284, "NLOG_NEI", 0, 0, 0),
                (285, "NLOG_DM", 0, 0, 0),
                (286, "NLOG_VAL", 0, 0, 0),
                (287, "NLOG_OPAL", 0, 0, 0),
                (288, "NLOG_IRQ", 0, 0, 0),
                (289, "NplMailboxRegisters", 0, 0, 0),
                (290, "powerGov_Fconfig", 0, 0, 0),
                (291, "powerGov_Sysparam", 0, 0, 0),
                (292, "powerGov_ThrottleCounters", 0, 0, 0),
                (293, "telemetryAPLDataArea1Reserve", 0, 0, 0),
                (294, "telemetryAPLDataArea2Reserve", 0, 0, 0),
                (295, "telemetryAPLDataArea3Reserve", 0, 0, 0),
                (296, "telemetryObjectDAValidation", 0, 0, 0),
                (297, "fConfigStream", 0, 0, 0),
                (298, "SdlSGRB_REGS", 0, 0, 0),
                (299, "SdlCP_REGS", 0, 0, 0),
                (300, "SdlSDMA_RD_RD", 0, 0, 0),
                (301, "SdlSDMA_WR_REGS", 0, 0, 0),
                (302, "SdlLYNX_LINK_REGS", 0, 0, 0),
                (303, "SdlSata_Pal_REGS", 0, 0, 0),
                (304, "SdlSataTransportStateInfo", 0, 0, 0),
                (305, "SdlTransportInfo", 0, 0, 0),
                (306, "SdlSramCmdDescBuff", 0, 0, 0),
                (307, "SdlDramDescBuff", 0, 0, 0),
                (308, "SdliCmdShadowCopies", 0, 0, 0),
                (309, "SdlSectorDmaDescArray", 0, 0, 0),
                (310, "SdlCmdHistoryDepth", 0, 0, 0),
                (311, "SdlInterDeviceCmd", 0, 0, 0),
                (312, "SdlInterDeviceCmdHistory", 0, 0, 0),
                (313, "NLOG_READPIPE_ID", 0, 0, 0),
                (314, "NLOG_READPIPE_TEST", 0, 0, 0),
                (315, "NLOG_READPIPE_TC", 0, 0, 0),
                (316, "NLOG_READPIPE_DEBUG", 0, 0, 0),
                (317, "NLOG_READPIPE_TEMP", 0, 0, 0),
                (318, "NLOG_READPIPE_15M", 0, 0, 0),
                (319, "NLOG_READPIPE_10D", 0, 0, 0),
                (320, "NLOG_READPIPE_HOST", 0, 0, 0),
                (321, "NLOG_READPIPE_BG", 0, 0, 0),
                (322, "NLOG_READPIPE_UNIQUE", 0, 0, 0),
                (323, "NLOG_READPIPE_SYS", 0, 0, 0),
                (324, "NLOG_READPIPE_ERROR", 0, 0, 0),
                (325, "NLOG_READPIPE_PLI", 0, 0, 0),
                (326, "NLOG_READPIPE_IBM", 0, 0, 0),
                (327, "NLOG_READPIPE_STATS", 0, 0, 0),
                (328, "NLOG_READPIPE_TSTATS", 0, 0, 0),
                (329, "NLOG_READPIPE_HFR", 0, 0, 0),
                (330, "NLOG_READPIPE_EHOST", 0, 0, 0),
                (331, "NLOG_READPIPE_WARN", 0, 0, 0),
                (332, "NLOG_READPIPE_RARE", 0, 0, 0),
                (333, "NLOG_READPIPE_THERM", 0, 0, 0),
                (334, "NLOG_READPIPE_MRRf", 0, 0, 0),
                (335, "NLOG_READPIPE_UEC", 0, 0, 0),
                (336, "NLOG_READPIPE_TRIM", 0, 0, 0),
                (337, "NLOG_READPIPE_MRRs", 0, 0, 0),
                (338, "NLOG_READPIPE_NEI", 0, 0, 0),
                (339, "NLOG_READPIPE_DM", 0, 0, 0),
                (340, "NLOG_READPIPE_VAL", 0, 0, 0),
                (341, "NLOG_READPIPE_OPAL", 0, 0, 0),
                (342, "NLOG_READPIPE_IRQ", 0, 0, 0),
                (343, "NLOG_DCTV", 0, 0, 0),
                (344, "NLOG_STM", 0, 0, 0),
                (345, "NLOG_MI", 0, 0, 0),
                (346, "NLOG_IO", 0, 0, 0),
                (347, "NLOG_BGF", 0, 0, 0),
                (348, "NLOG_PMIC", 0, 0, 0),
                (349, "NLOG_XPT_e", 0, 0, 0),
                (350, "NLOG_READPIPE_DCTV", 0, 0, 0),
                (351, "NLOG_READPIPE_STM", 0, 0, 0),
                (352, "NLOG_READPIPE_MI", 0, 0, 0),
                (353, "NLOG_READPIPE_IO", 0, 0, 0),
                (354, "NLOG_READPIPE_BGF", 0, 0, 0),
                (355, "NLOG_READPIPE_PMIC", 0, 0, 0),
                (356, "NLOG_READPIPE_XPT", 0, 0, 0),
                (359, "telemNANDFwBuildInfo", 0, 0, 0),
                (360, "telemetryHostTime", 0, 0, 0),
                (361, "telem3DXPFwBuildInfo", 0, 0, 0),
                (362, "NLOG_READPIPE_SECR", 0, 0, 0),
                (363, "NLOG_SECR", 0, 0, 0),
                (364, "telemetryDataArea1TestStructure", 0, 0, 0),
                (365, "telemetryDataArea2TestStructure", 0, 0, 0),
                (366, "telemetryDataArea3TestStructure", 0, 0, 0),
                (368, "telemetryOemDataMapHeader", 0, 0, 0),
                (369, "ThermalTelemetry", 0, 0, 0),
                (370, "transportStateInfoSATA", 0, 0, 0),
                (371, "transportStateInfoCTL1_SBank", 0, 0, 0),
                (372, "transportStateInfoCTL1_DBank_e", 0, 0, 0),
                (373, "transportStateInfoCTL2_SBank_e", 0, 0, 0),
                (374, "transportStateInfoCTL2_DBank", 0, 0, 0),
                (376, "counters", 0, 0, 0),
                (382, "iNQ", 0, 0, 0),
                (397, "CtxSave", 0, 0, 0),
                (65435, "telemetryObjectSpecialId", 0, 0, 0),
                (65436, "telemetryObjectIntelVUToc", 0, 0, 0),
                (65437, "telemetryObjectBlockAlignmentPad", 0, 0, 0),
                (65438, "telemetryObjectHIDataBlob", 0, 0, 0),
                (65439, "telemetryObjectIntfHeader", 0, 0, 0),
                (65440, "telemetryObjectHIBlobHeader", 0, 0, 0),
                (2147483648, "nlogBuffers", 0, 0, 0),
                (2147483649, "pliSlice", 0, 0, 0),
                (2147483650, "transportStateInfo", 0, 0, 0),
                (2147483651, "smart", 0, 0, 0),
                (2147483652, "dieDataLog", 0, 0, 0),
                (2147483653, "geom", 0, 0, 0),
                (2147483654, "dieMap", 0, 0, 0),
                (2147483655, "throttle", 0, 0, 0),
                (2147483656, "atomicSlowCtxFile", 0, 0, 0),
                (2147483657, "sim", 0, 0, 0),
                (2147483658, "TrainingLog", 0, 0, 0),
                (4294967292, "TimeStamp", 0, 0, 0),
                (4294967293, "defaultID", 0, 0, 0),
                (4294967294, "unknownUniqueIdentifier", 0, 0, 0),
    ]

TELEMETRYLIST_OLD = [
    # Id, Instance, Class Type, major, minor, byte size.
    (0, "assertdump", 0, 0, 0),
    (1, "FwSideTrace", 0, 0, 0),
    (2, "BlSideTrace", 0, 0, 0),
    (3, "Nlog", 0, 0, 0),
    (4, "dpEventDump", 0, 0, 0),
    (5, "bis", 0, 0, 0),
    (6, "ThermalSensor", 0, 0, 0),
    (7, "smartPowerOnSnapshot", 0, 0, 0),
    (8, "ThermalStats", 0, 0, 0),
    (9, "LLFState", 0, 0, 0),
    (10, "initState", 0, 0, 0),
    (11, "LEDStatus", 0, 0, 0),
    (12, "mNmiMsg", 0, 0, 0),
    (13, "preCoreStatsHolder", 0, 0, 0),
    (14, "coreStatsHolder", 0, 0, 0),
    (15, "mFlowCtl", 0, 0, 0),
    (16, "transportStats", 0, 0, 0),
    (17, "pssDebugTrace", 0, 0, 0),
    (18, "mMiCmdCtx", 0, 0, 0),
    (19, "tapStats", 0, 0, 0),
    (20, "NplCmdStateInfo", 0, 0, 0),
    (21, "mMicp", 0, 0, 0),
    (22, "mMicInfo", 0, 0, 0),
    (23, "mMiEventCtx", 0, 0, 0),
    (24, "mMiEventCtxDisableSecRevChk", 0, 0, 0),
    (25, "mMiEventCtxFwUpdateLock", 0, 0, 0),
    (26, "mMiEvntCtxFwUpd", 0, 0, 0),
    (27, "mCfg", 0, 0, 0),
    (28, "coreInfo", 0, 0, 0),
    (29, "mMiMicpEvent", 0, 0, 0),
    (30, "mMiCmdCfg", 0, 0, 0),
    (31, "mMiNmiEvent", 0, 0, 0),
    (32, "mMiCmdResp", 0, 0, 0),
    (33, "mMiMctrlEvent", 0, 0, 0),
    (34, "mDebugStartTime", 0, 0, 0),
    (35, "mmIoAddr", 0, 0, 0),
    (36, "mMiTapEvents", 0, 0, 0),
    (37, "mNmiMoreTimeDelay", 0, 0, 0),
    (38, "mpDispState", 0, 0, 0),
    (39, "mpProcState", 0, 0, 0),
    (40, "mpState", 0, 0, 0),
    (41, "defragHistory", 0, 0, 0),
    (42, "Defrag_MissedRelos", 0, 0, 0),
    (43, "Arbiter", 0, 0, 0),
    (44, "DefragInfoSlow", 0, 0, 0),
    (45, "Defrag_DustingQueue", 0, 0, 0),
    (46, "Defrag_LockedQueue", 0, 0, 0),
    (47, "Defrag_WAQueue", 0, 0, 0),
    (48, "Defrag_WearLevelQueue", 0, 0, 0),
    (49, "DefragInfo", 0, 0, 0),
    (50, "Defrag_BandsDoneQueue", 0, 0, 0),
    (51, "Defrag_HistoricDustMixRate", 0, 0, 0),
    (52, "DefragStateCounters", 0, 0, 0),
    (53, "leftOver", 0, 0, 0),
    (54, "Defrag_ForcedReloQ", 0, 0, 0),
    (55, "readLatencyStats", 0, 0, 0),
    (56, "writeLatencyStats", 0, 0, 0),
    (57, "NandDiscovery", 0, 0, 0),
    (58, "fConfigInfoTable", 0, 0, 0),
    (59, "factoryConfig", 0, 0, 0),
    (60, "PliHeader", 0, 0, 0),
    (61, "PliRestoreHeader", 0, 0, 0),
    (62, "PliSaveHeader", 0, 0, 0),
    (63, "PliFooter", 0, 0, 0),
    (64, "PliRestoreFooter", 0, 0, 0),
    (65, "PliSaveFooter", 0, 0, 0),
    (66, "PliRestoreCompleter", 0, 0, 0),
    (67, "bandObjectsExt", 0, 0, 0),
    (68, "mMaster", 0, 0, 0),
    (69, "mSlave", 0, 0, 0),
    (70, "mPacket", 0, 0, 0),
    (71, "mNbm", 0, 0, 0),
    (72, "mCmdProc", 0, 0, 0),
    (73, "mRespProc", 0, 0, 0),
    (74, "mMctrlPacket", 0, 0, 0),
    (75, "mWrReq", 0, 0, 0),
    (76, "mFwDownldMeta", 0, 0, 0),
    (77, "mNvmSubSysHealth", 0, 0, 0),
    (78, "mRdReq", 0, 0, 0),
    (79, "mNvmCtrlHealth", 0, 0, 0),
    (80, "mMctpMsgBldr", 0, 0, 0),
    (81, "mClrCmpCtrlStatus", 0, 0, 0),
    (82, "mCmpCtrlStatus", 0, 0, 0),
    (83, "mFlowCtlStatus", 0, 0, 0),
    (84, "mRunTimeSmbAddress", 0, 0, 0),
    (85, "trimEntriesBuffer", 0, 0, 0),
    (86, "mrr_log", 0, 0, 0),
    (87, "tcm_queues", 0, 0, 0),
    (88, "Stats", 0, 0, 0),
    (89, "mrr_state", 0, 0, 0),
    (90, "WSM_Info", 0, 0, 0),
    (91, "mrr_successDistribution", 0, 0, 0),
    (92, "EnduranceMgr", 0, 0, 0),
    (93, "tll_cache_manager", 0, 0, 0),
    (94, "ReadDisturb", 0, 0, 0),
    (95, "buffer_targets", 0, 0, 0),
    (96, "backEndStats", 0, 0, 0),
    (97, "mrr_AuditTimeMs", 0, 0, 0),
    (98, "nlogBufPool", 0, 0, 0),
    (99, "nlogPoolPliLogs", 0, 0, 0),
    (100, "nlogStat", 0, 0, 0),
    (101, "nlogSelect", 0, 0, 0),
    (102, "nlogPliLogs", 0, 0, 0),
    (103, "nlogPoolPliLogsPtr", 0, 0, 0),
    (104, "nlogEventCounter", 0, 0, 0),
    (105, "nlogPausedNlogs", 0, 0, 0),
    (106, "nlogHostLogPtr", 0, 0, 0),
    (107, "ABT_Stack", 0, 0, 0),
    (108, "fwRevision", 0, 0, 0),
    (109, "mrr_status", 0, 0, 0),
    (110, "PliRestoreState", 0, 0, 0),
    (111, "stackXORRecovery", 0, 0, 0),
    (112, "stackDefrag", 0, 0, 0),
    (113, "stackHalSvc", 0, 0, 0),
    (114, "stackWriteCache", 0, 0, 0),
    (115, "stackXportCmdDisp", 0, 0, 0),
    (116, "stackContextTask", 0, 0, 0),
    (117, "stackSecurityTask", 0, 0, 0),
    (118, "stackServiceTask", 0, 0, 0),
    (119, "stackCoreDispatch", 0, 0, 0),
    (120, "stackXfer", 0, 0, 0),
    (121, "IRQ_Stack", 0, 0, 0),
    (122, "XORinfo", 0, 0, 0),
    (123, "ReadDisturb_MrrNearMissQueue", 0, 0, 0),
    (124, "stackCoreComplete", 0, 0, 0),
    (125, "stackIdle", 0, 0, 0),
    (126, "PliWriteStream", 0, 0, 0),
    (127, "nandReadWriteWorkStack", 0, 0, 0),
    (128, "SYS_Stack", 0, 0, 0),
    (129, "Xor_Hw_Info", 0, 0, 0),
    (130, "HalCpu_ResetStack1", 0, 0, 0),
    (131, "HalCpu_ResetStack2", 0, 0, 0),
    (132, "PliSideTraceCoreDataInAssertDump", 0, 0, 0),
    (133, "pliSideTraceStackDump", 0, 0, 0),
    (134, "PMIC_REGS", 0, 0, 0),
    (135, "nandSyncLock", 0, 0, 0),
    (136, "assertDumpFindGate", 0, 0, 0),
    (137, "assertGate", 0, 0, 0),
    (138, "assertRecoveryGate", 0, 0, 0),
    (139, "burninGate", 0, 0, 0),
    (140, "capChargeGate", 0, 0, 0),
    (141, "cdmEraseGate", 0, 0, 0),
    (142, "correctorGate", 0, 0, 0),
    (143, "cpuifInitGate", 0, 0, 0),
    (144, "cpuifRstGate", 0, 0, 0),
    (145, "dramEccGate", 0, 0, 0),
    (146, "gate", 0, 0, 0),
    (147, "llfEraseGate", 0, 0, 0),
    (148, "llrInitGate", 0, 0, 0),
    (149, "nandPhyRstGate", 0, 0, 0),
    (150, "pliConditionalWriteCompleterGate", 0, 0, 0),
    (151, "pliGate", 0, 0, 0),
    (152, "pliNandQuiesceGate", 0, 0, 0),
    (153, "pliNandResetGate", 0, 0, 0),
    (154, "pliWriteCompleterGate", 0, 0, 0),
    (155, "powerGovGate", 0, 0, 0),
    (156, "preSlowCtxGate", 0, 0, 0),
    (157, "relaySelectSyncGate", 0, 0, 0),
    (158, "startUpGate", 0, 0, 0),
    (159, "temperatureGate", 0, 0, 0),
    (160, "wpGate", 0, 0, 0),
    (161, "xorInitGate", 0, 0, 0),
    (162, "TransIcmdReservedReuseStack", 0, 0, 0),
    (163, "ActiveTaskStackPointer", 0, 0, 0),
    (164, "assertGateUnlock", 0, 0, 0),
    (165, "PliBandEraseState", 0, 0, 0),
    (166, "warmResetGateUnlock", 0, 0, 0),
    (167, "pliSaveState", 0, 0, 0),
    (168, "dm", 0, 0, 0),
    (169, "pssRegs", 0, 0, 0),
    (170, "Xor_DebugLog", 0, 0, 0),
    (171, "pCmdCtxList", 0, 0, 0),
    (172, "dmaDescMsgs", 0, 0, 0),
    (173, "Nei", 0, 0, 0),
    (174, "iCmdPtrList", 0, 0, 0),
    (175, "PsrInfo", 0, 0, 0),
    (176, "nandTrimMgrInfo", 0, 0, 0),
    (177, "band_SeqInfo", 0, 0, 0),
    (178, "mrr_eventCounters", 0, 0, 0),
    (179, "mrr_refCache", 0, 0, 0),
    (180, "XORRecovery", 0, 0, 0),
    (181, "band_EraseInfo", 0, 0, 0),
    (182, "band_InvalidityInfo", 0, 0, 0),
    (183, "band_LinkedList", 0, 0, 0),
    (184, "band_PageCount", 0, 0, 0),
    (185, "bootProfileDRAM", 0, 0, 0),
    (186, "runningStatus", 0, 0, 0),
    (187, "InternalDataCmdDescPool", 0, 0, 0),
    (188, "band_EbCount", 0, 0, 0),
    (189, "band_StripeCount", 0, 0, 0),
    (190, "xorDebugStats", 0, 0, 0),
    (191, "SlowCtx", 0, 0, 0),
    (192, "bandPweInfo", 0, 0, 0),
    (193, "ProgStream", 0, 0, 0),
    (194, "PrefetchData", 0, 0, 0),
    (195, "SlowCtxDataArray", 0, 0, 0),
    (196, "NandChannelRegsDump", 0, 0, 0),
    (197, "WsmBandAbortLog", 0, 0, 0),
    (198, "band_State", 0, 0, 0),
    (199, "nplFaultInfo", 0, 0, 0),
    (200, "npsRegs", 0, 0, 0),
    (201, "dmtRegs", 0, 0, 0),
    (202, "Replay", 0, 0, 0),
    (203, "band_isCleanBand", 0, 0, 0),
    (204, "band_isDefragLockedForNandError", 0, 0, 0),
    (205, "band_isDefragLockedUntilCtxSave", 0, 0, 0),
    (206, "band_isXorEnabled", 0, 0, 0),
    (207, "InternalDataCmdDescFree", 0, 0, 0),
    (208, "dynamicWindow", 0, 0, 0),
    (209, "fwUpdState", 0, 0, 0),
    (210, "tbufInfo", 0, 0, 0),
    (211, "mrr_audit", 0, 0, 0),
    (212, "capTestInfo", 0, 0, 0),
    (213, "CtxRestoreTime", 0, 0, 0),
    (214, "SystemInfo", 0, 0, 0),
    (215, "mailBoxesToSave", 0, 0, 0),
    (216, "dramEccInfo", 0, 0, 0),
    (217, "LLFFormatProgress", 0, 0, 0),
    (218, "nplMmioInfo", 0, 0, 0),
    (219, "channelTimeout", 0, 0, 0),
    (220, "indConfig", 0, 0, 0),
    (221, "nplErrInfo", 0, 0, 0),
    (222, "SafeShutdownInfo", 0, 0, 0),
    (223, "nplCount", 0, 0, 0),
    (224, "PliCapInfo", 0, 0, 0),
    (225, "InitStateCoreSync", 0, 0, 0),
    (226, "LLFFormatProgressHost", 0, 0, 0),
    (227, "nplCore0Info", 0, 0, 0),
    (228, "nplCore1Info", 0, 0, 0),
    (229, "dmt_register_base", 0, 0, 0),
    (230, "nplTransInfo", 0, 0, 0),
    (231, "PMIC", 0, 0, 0),
    (232, "core0ChildMailboxItem", 0, 0, 0),
    (233, "core1ChildMailboxItem", 0, 0, 0),
    (234, "dlmRegs", 0, 0, 0),
    (235, "dmtDebug0", 0, 0, 0),
    (236, "dmtDebug1", 0, 0, 0),
    (237, "dmtDebug2", 0, 0, 0),
    (238, "REGS_NPL", 0, 0, 0),
    (239, "Xor_DebugLogIndex", 0, 0, 0),
    (240, "telemetry", 0, 0, 0),
    (241, "PliSideTracePayload", 0, 0, 0),
    (242, "SpiFlash", 0, 0, 0),
    (243, "PliSideTraceCoreData", 0, 0, 0),
    (244, "pliCriticalSectionStartAddr", 0, 0, 0),
    (245, "pliCoreSpecificFlags", 0, 0, 0),
    (246, "pssExtRegs", 0, 0, 0),
    (247, "nvmeFeatures", 0, 0, 0),
    (248, "bridgeInfo", 0, 0, 0),
    (249, "ERROR_249", 0, 0, 0),
    (250, "BridgeStatus", 0, 0, 0),
    (251, "nplInfoState", 0, 0, 0),
    (252, "NplCQueueState", 0, 0, 0),  # @todo re-generate... NplCQueueState =>  qMgrCQList
    (253, "nplInfo", 0, 0, 0),
    (254, "NplSQueueState", 0, 0, 0),  # @todo re-generate... NplSQueueState => qMgrSQList
    (255, "NplMailboxState", 0, 0, 0),
    (256, "NplCQueueRegisters", 0, 0, 0),
    (257, "NplSQueueRegisters", 0, 0, 0),
    (258, "DefragHistoryPart", 0, 0, 0),
    (259, "NLOG_ID", 0, 0, 0),
    (260, "NLOG_TEST", 0, 0, 0),
    (261, "NLOG_TC", 0, 0, 0),
    (262, "NLOG_DEBUG", 0, 0, 0),
    (263, "NLOG_TEMP", 0, 0, 0),
    (264, "NLOG_15M", 0, 0, 0),
    (265, "NLOG_10D", 0, 0, 0),
    (266, "NLOG_HOST", 0, 0, 0),
    (267, "NLOG_BG", 0, 0, 0),
    (268, "NLOG_UNIQUE", 0, 0, 0),
    (269, "NLOG_SYS", 0, 0, 0),
    (270, "NLOG_ERROR", 0, 0, 0),
    (271, "NLOG_PLI", 0, 0, 0),
    (272, "NLOG_IBM", 0, 0, 0),
    (273, "NLOG_STATS", 0, 0, 0),
    (274, "NLOG_TSTATS", 0, 0, 0),
    (275, "NLOG_HFR", 0, 0, 0),
    (276, "NLOG_EHOST", 0, 0, 0),
    (277, "NLOG_WARN", 0, 0, 0),
    (278, "NLOG_RARE", 0, 0, 0),
    (279, "NLOG_THERM", 0, 0, 0),
    (280, "NLOG_MRRf", 0, 0, 0),
    (281, "NLOG_UEC", 0, 0, 0),
    (282, "NLOG_TRIM", 0, 0, 0),
    (283, "NLOG_MRRs", 0, 0, 0),
    (284, "NLOG_NEI", 0, 0, 0),
    (285, "NLOG_DM", 0, 0, 0),
    (286, "NLOG_VAL", 0, 0, 0),
    (287, "NLOG_OPAL", 0, 0, 0),
    (288, "NLOG_IRQ", 0, 0, 0),
    (289, "NplMailboxRegisters", 0, 0, 0),
    (290, "powerGov_Fconfig", 0, 0, 0),
    (291, "pwgSysParam", 0, 0, 0),
    (292, "powerGov_ThrottleCounters", 0, 0, 0),
    (293, "telemetryAPLDataArea1Reserve", 0, 0, 0),
    (294, "telemetryAPLDataArea2Reserve", 0, 0, 0),
    (295, "telemetryAPLDataArea3Reserve", 0, 0, 0),
    (296, "telemetryObjectDAValidation", 0, 0, 0),
    (297, "fConfigStream", 0, 0, 0),
    (298, "SdlSGRB_REGS", 0, 0, 0),
    (299, "SdlCP_REGS", 0, 0, 0),
    (300, "SdlSDMA_RD_RD", 0, 0, 0),
    (301, "SdlSDMA_WR_REGS", 0, 0, 0),
    (302, "SdlLYNX_LINK_REGS", 0, 0, 0),
    (303, "SdlSata_Pal_REGS", 0, 0, 0),
    (304, "SdlSataTransportStateInfo", 0, 0, 0),
    (305, "SdlTransportInfo", 0, 0, 0),
    (306, "SdlSramCmdDescBuff", 0, 0, 0),
    (307, "SdlDramDescBuff", 0, 0, 0),
    (308, "SdliCmdShadowCopies", 0, 0, 0),
    (309, "SdlSectorDmaDescArray", 0, 0, 0),
    (310, "SdlCmdHistoryDepth", 0, 0, 0),
    (311, "SdlInterDeviceCmd", 0, 0, 0),
    (312, "SdlInterDeviceCmdHistory", 0, 0, 0),
    (313, "NLOG_READPIPE_ID", 0, 0, 0),
    (314, "NLOG_READPIPE_TEST", 0, 0, 0),
    (315, "NLOG_READPIPE_TC", 0, 0, 0),
    (316, "NLOG_READPIPE_DEBUG", 0, 0, 0),
    (317, "NLOG_READPIPE_TEMP", 0, 0, 0),
    (318, "NLOG_READPIPE_15M", 0, 0, 0),
    (319, "NLOG_READPIPE_10D", 0, 0, 0),
    (320, "NLOG_READPIPE_HOST", 0, 0, 0),
    (321, "NLOG_READPIPE_BG", 0, 0, 0),
    (322, "NLOG_READPIPE_UNIQUE", 0, 0, 0),
    (323, "NLOG_READPIPE_SYS", 0, 0, 0),
    (324, "NLOG_READPIPE_ERROR", 0, 0, 0),
    (325, "NLOG_READPIPE_PLI", 0, 0, 0),
    (326, "NLOG_READPIPE_IBM", 0, 0, 0),
    (327, "NLOG_READPIPE_STATS", 0, 0, 0),
    (328, "NLOG_READPIPE_TSTATS", 0, 0, 0),
    (329, "NLOG_READPIPE_HFR", 0, 0, 0),
    (330, "NLOG_READPIPE_EHOST", 0, 0, 0),
    (331, "NLOG_READPIPE_WARN", 0, 0, 0),
    (332, "NLOG_READPIPE_RARE", 0, 0, 0),
    (333, "NLOG_READPIPE_THERM", 0, 0, 0),
    (334, "NLOG_READPIPE_MRRf", 0, 0, 0),
    (335, "NLOG_READPIPE_UEC", 0, 0, 0),
    (336, "NLOG_READPIPE_TRIM", 0, 0, 0),
    (337, "NLOG_READPIPE_MRRs", 0, 0, 0),
    (338, "NLOG_READPIPE_NEI", 0, 0, 0),
    (339, "NLOG_READPIPE_DM", 0, 0, 0),
    (340, "NLOG_READPIPE_VAL", 0, 0, 0),
    (341, "NLOG_READPIPE_OPAL", 0, 0, 0),
    (342, "NLOG_READPIPE_IRQ", 0, 0, 0),
    (343, "NLOG_DCTV", 0, 0, 0),
    (344, "NLOG_STM", 0, 0, 0),
    (345, "NLOG_MI", 0, 0, 0),
    (346, "NLOG_IO", 0, 0, 0),
    (347, "NLOG_BGF", 0, 0, 0),
    (348, "NLOG_PMIC", 0, 0, 0),
    (349, "NLOG_XPT", 0, 0, 0),
    (350, "NLOG_READPIPE_DCTV", 0, 0, 0),
    (351, "NLOG_READPIPE_STM", 0, 0, 0),
    (352, "NLOG_READPIPE_MI", 0, 0, 0),
    (353, "NLOG_READPIPE_IO", 0, 0, 0),
    (354, "NLOG_READPIPE_BGF", 0, 0, 0),
    (355, "NLOG_READPIPE_PMIC", 0, 0, 0),
    (356, "NLOG_READPIPE_XPT", 0, 0, 0),
    (359, "telemNANDFwBuildInfo", 0, 0, 0),  # @todo create parsers from this node.
    (360, "telemetryHostTime", 0, 0, 0),  # @todo create parsers from this node.
    (361, "telem3DXPFwBuildInfo", 0, 0, 0),
    (362, "NLOG_READPIPE_SECR", 0, 0, 0),  # @todo create parsers from this node.
    (363, "NLOG_SECR", 0, 0, 0),  # @todo create parsers from this node.
    (364, "telemetryDataArea1TestStructure", 0, 0, 0),
    (365, "telemetryDataArea2TestStructure", 0, 0, 0),
    (366, "telemetryDataArea3TestStructure", 0, 0, 0),
    (368, "telemetryOemDataMapHeader", 0, 0, 0),
    (369, "ThermalTelemetry", 0, 0, 0),  # @todo create parsers from this node.
    (370, "transportStateInfoSATA", 0, 0, 0),
    (371, "transportStateInfoCTL1_SBank", 0, 0, 0),
    (372, "transportStateInfoCTL1_DBank", 0, 0, 0),
    (373, "transportStateInfoCTL2_SBank", 0, 0, 0),
    (374, "transportStateInfoCTL2_DBank", 0, 0, 0),  # @todo create parsers from this node.
    (376, "counters", 0, 0, 0),
    (382, "iNQ", 0, 0, 0),
    (391, "dieOfflineInfo", 0, 0, 0),
    (392, "PersistentEventLog", 0, 0, 0),
    (394, "telemetryCITestStructure", 0, 0, 0),
    (395, "NLOG_LTSSM", 0, 0, 0),
    (396, "NLOG_READPIPE_LTSSM", 0, 0, 0),
    (401, "telemetryICmdSplitter", 0, 0, 0),
    (65435, "telemetryObjectSpecialId", 0, 0, 0),
    (65436, "telemetryObjectIntelVUToc", 0, 0, 0),
    (65437, "telemetryObjectBlockAlignmentPad", 0, 0, 0),
    (65438, "telemetryObjectHIDataBlob", 0, 0, 0),
    (65439, "telemetryObjectIntfHeader", 0, 0, 0),
    (65440, "telemetryObjectHIBlobHeader", 0, 0, 0),
    (1000000, "geom", 0, 0, 0),
    (1000010, "dieMap", 0, 0, 0),
    (1000020, "Pli", 0, 0, 0),
    (1000030, "PliSlice", 0, 0, 0),
    (1000040, "throttle", 0, 0, 0),
    (1000050, "DeviceSelfTestLog", 0, 0, 0),
    (1000060, "LpTransitionLog", 0, 0, 0),
    (1000070, "LpTransitionStatsLog", 0, 0, 0),
    (1000080, "LpConfiguration", 0, 0, 0),
    (1000090, "transportStateInfo", 0, 0, 0),
    (1000100, "NPL_REG_GRB_NPLECTL_R", 0, 0, 0),
    (1000110, "NPL_REG_CSTS_R", 0, 0, 0),
    (1000120, "NPL_REG_CC_R", 0, 0, 0),
    (1000130, "dataLayout", 0, 0, 0),
    (1000140, "channelMap", 0, 0, 0),
    (1000150, "dieDataLog", 0, 0, 0),
    (1000160, "sim", 0, 0, 0),
    (1000170, "eccErrorsLog", 0, 0, 0),
    (1000180, "mediaErrLog", 0, 0, 0),
    (1000190, "SlowCtxRebuild", 0, 0, 0),
    (1000200, "DieOfflineDieStats", 0, 0, 0),
    (1000210, "DieInfoExt", 0, 0, 0),
    (1000220, "smart", 0, 0, 0),
    (1000230, "thermalThrottle", 0, 0, 0),
    (1000240, "powerThrottle", 0, 0, 0),
    (1000500, "nlogBuffers", 0, 0, 0),
    (1000510, "nlog", 0, 0, 0),
    (4294967293, "defaultID", 0, 0, 0),
    (4294967294, "unknownUniqueIdentifier", 0, 0, 0),
]

TELEMETRYLIST = [
    # Id, Instance, Class Type, major, minor, byte size.
    (0, "assertdump", 0, 0, 0),
    (1, "FwSideTrace", 0, 0, 0),
    (2, "BlSideTrace", 0, 0, 0),
    (3, "Nlog", 0, 0, 0),
    (4, "dpEventDump", 0, 0, 0),
    (5, "bis", 0, 0, 0),
    (6, "ThermalSensor", 0, 0, 0),
    (7, "smartPowerOnSnapshot", 0, 0, 0),
    (8, "ThermalStats", 0, 0, 0),
    (9, "LLFState", 0, 0, 0),
    (10, "initState", 0, 0, 0),
    (11, "LEDStatus", 0, 0, 0),
    (12, "mNmiMsg", 0, 0, 0),
    (13, "preCoreStatsHolder", 0, 0, 0),
    (14, "coreStatsHolder", 0, 0, 0),
    (15, "mFlowCtl", 0, 0, 0),
    (16, "transportStats", 0, 0, 0),
    (17, "pssDebugTrace", 0, 0, 0),
    (18, "mMiCmdCtx", 0, 0, 0),
    (19, "tapStats", 0, 0, 0),
    (20, "NplCmdStateInfo", 0, 0, 0),
    (21, "mMicp", 0, 0, 0),
    (22, "mMicInfo", 0, 0, 0),
    (23, "mMiEventCtx", 0, 0, 0),
    (24, "mMiEventCtxDisableSecRevChk", 0, 0, 0),
    (25, "mMiEventCtxFwUpdateLock", 0, 0, 0),
    (26, "mMiEvntCtxFwUpd", 0, 0, 0),
    (27, "mCfg", 0, 0, 0),
    (28, "coreInfo", 0, 0, 0),
    (29, "mMiMicpEvent", 0, 0, 0),
    (30, "mMiCmdCfg", 0, 0, 0),
    (31, "mMiNmiEvent", 0, 0, 0),
    (32, "mMiCmdResp", 0, 0, 0),
    (33, "mMiMctrlEvent", 0, 0, 0),
    (34, "mDebugStartTime", 0, 0, 0),
    (35, "mmIoAddr", 0, 0, 0),
    (36, "mMiTapEvents", 0, 0, 0),
    (37, "mNmiMoreTimeDelay", 0, 0, 0),
    (38, "mpDispState", 0, 0, 0),
    (39, "mpProcState", 0, 0, 0),
    (40, "mpState", 0, 0, 0),
    (41, "DefragHistory", 0, 0, 0),
    (42, "Defrag_MissedRelos", 0, 0, 0),
    (43, "Arbiter", 0, 0, 0),
    (44, "DefragInfoSlow", 0, 0, 0),
    (45, "Defrag_DustingQueue", 0, 0, 0),
    (46, "Defrag_LockedQueue", 0, 0, 0),
    (47, "Defrag_WAQueue", 0, 0, 0),
    (48, "Defrag_WearLevelQueue", 0, 0, 0),
    (49, "DefragInfo", 0, 0, 0),
    (50, "Defrag_BandsDoneQueue", 0, 0, 0),
    (51, "Defrag_HistoricDustMixRate", 0, 0, 0),
    (52, "DefragStateCounters", 0, 0, 0),
    (53, "leftOver", 0, 0, 0),
    (54, "Defrag_ForcedReloQ", 0, 0, 0),
    (55, "readLatencyStats", 0, 0, 0),
    (56, "writeLatencyStats", 0, 0, 0),
    (57, "NandDiscovery", 0, 0, 0),
    (58, "fConfigInfoTable", 0, 0, 0),
    (59, "factoryConfig", 0, 0, 0),
    (60, "PliHeader", 0, 0, 0),
    (61, "PliRestoreHeader", 0, 0, 0),
    (62, "PliSaveHeader", 0, 0, 0),
    (63, "PliFooter", 0, 0, 0),
    (64, "PliRestoreFooter", 0, 0, 0),
    (65, "PliSaveFooter", 0, 0, 0),
    (66, "PliRestoreCompleter", 0, 0, 0),
    (67, "bandObjectsExt", 0, 0, 0),
    (68, "mMaster", 0, 0, 0),
    (69, "mSlave", 0, 0, 0),
    (70, "mPacket", 0, 0, 0),
    (71, "mNbm", 0, 0, 0),
    (72, "mCmdProc", 0, 0, 0),
    (73, "mRespProc", 0, 0, 0),
    (74, "mMctrlPacket", 0, 0, 0),
    (75, "mWrReq", 0, 0, 0),
    (76, "mFwDownldMeta", 0, 0, 0),
    (77, "mNvmSubSysHealth", 0, 0, 0),
    (78, "mRdReq", 0, 0, 0),
    (79, "mNvmCtrlHealth", 0, 0, 0),
    (80, "mMctpMsgBldr", 0, 0, 0),
    (81, "mClrCmpCtrlStatus", 0, 0, 0),
    (82, "mCmpCtrlStatus", 0, 0, 0),
    (83, "mFlowCtlStatus", 0, 0, 0),
    (84, "mRunTimeSmbAddress", 0, 0, 0),
    (85, "trimEntriesBuffer", 0, 0, 0),
    (86, "mrr_log", 0, 0, 0),
    (87, "tcm_queues", 0, 0, 0),
    (88, "Stats", 0, 0, 0),
    (89, "mrr_state", 0, 0, 0),
    (90, "WSM_Info", 0, 0, 0),
    (91, "mrr_successDistribution", 0, 0, 0),
    (92, "EnduranceMgr", 0, 0, 0),
    (93, "tll_cache_manager", 0, 0, 0),
    (94, "ReadDisturb", 0, 0, 0),
    (95, "buffer_targets", 0, 0, 0),
    (96, "backEndStats", 0, 0, 0),
    (97, "mrr_AuditTimeMs", 0, 0, 0),
    (98, "nlogBufPool", 0, 0, 0),
    (99, "nlogPoolPliLogs", 0, 0, 0),
    (100, "nlogStat", 0, 0, 0),
    (101, "nlogSelect", 0, 0, 0),
    (102, "nlogPliLogs", 0, 0, 0),
    (103, "nlogPoolPliLogsPtr", 0, 0, 0),
    (104, "nlogEventCounter", 0, 0, 0),
    (105, "nlogPausedNlogs", 0, 0, 0),
    (106, "nlogHostLogPtr", 0, 0, 0),
    (107, "ABT_Stack", 0, 0, 0),
    (108, "fwRevision", 0, 0, 0),
    (109, "mrr_status", 0, 0, 0),
    (110, "PliRestoreState", 0, 0, 0),
    (111, "stackXORRecovery", 0, 0, 0),
    (112, "stackDefrag", 0, 0, 0),
    (113, "stackHalSvc", 0, 0, 0),
    (114, "stackWriteCache", 0, 0, 0),
    (115, "stackXportCmdDisp", 0, 0, 0),
    (116, "stackContextTask", 0, 0, 0),
    (117, "stackSecurityTask", 0, 0, 0),
    (118, "stackServiceTask", 0, 0, 0),
    (119, "stackCoreDispatch", 0, 0, 0),
    (120, "stackXfer", 0, 0, 0),
    (121, "IRQ_Stack", 0, 0, 0),
    (122, "XORinfo", 0, 0, 0),
    (123, "ReadDisturb_MrrNearMissQueue", 0, 0, 0),
    (124, "stackCoreComplete", 0, 0, 0),
    (125, "stackIdle", 0, 0, 0),
    (126, "PliWriteStream", 0, 0, 0),
    (127, "nandReadWriteWorkStack", 0, 0, 0),
    (128, "SYS_Stack", 0, 0, 0),
    (129, "Xor_Hw_Info", 0, 0, 0),
    (130, "HalCpu_ResetStack1", 0, 0, 0),
    (131, "HalCpu_ResetStack2", 0, 0, 0),
    (132, "PliSideTraceCoreDataInAssertDump", 0, 0, 0),
    (133, "pliSideTraceStackDump", 0, 0, 0),
    (134, "PMIC_REGS", 0, 0, 0),
    (135, "nandSyncLock", 0, 0, 0),
    (136, "assertDumpFindGate", 0, 0, 0),
    (137, "assertGate", 0, 0, 0),
    (138, "assertRecoveryGate", 0, 0, 0),
    (139, "burninGate", 0, 0, 0),
    (140, "capChargeGate", 0, 0, 0),
    (141, "cdmEraseGate", 0, 0, 0),
    (142, "correctorGate", 0, 0, 0),
    (143, "cpuifInitGate", 0, 0, 0),
    (144, "cpuifRstGate", 0, 0, 0),
    (145, "dramEccGate", 0, 0, 0),
    (146, "gate", 0, 0, 0),
    (147, "llfEraseGate", 0, 0, 0),
    (148, "llrInitGate", 0, 0, 0),
    (149, "nandPhyRstGate", 0, 0, 0),
    (150, "pliConditionalWriteCompleterGate", 0, 0, 0),
    (151, "pliGate", 0, 0, 0),
    (152, "pliNandQuiesceGate", 0, 0, 0),
    (153, "pliNandResetGate", 0, 0, 0),
    (154, "pliWriteCompleterGate", 0, 0, 0),
    (155, "powerGovGate", 0, 0, 0),
    (156, "preSlowCtxGate", 0, 0, 0),
    (157, "relaySelectSyncGate", 0, 0, 0),
    (158, "startUpGate", 0, 0, 0),
    (159, "temperatureGate", 0, 0, 0),
    (160, "wpGate", 0, 0, 0),
    (161, "xorInitGate", 0, 0, 0),
    (162, "TransIcmdReservedReuseStack", 0, 0, 0),
    (163, "ActiveTaskStackPointer", 0, 0, 0),
    (164, "assertGateUnlock", 0, 0, 0),
    (165, "PliBandEraseState", 0, 0, 0),
    (166, "warmResetGateUnlock", 0, 0, 0),
    (167, "pliSaveState", 0, 0, 0),
    (168, "dm", 0, 0, 0),
    (169, "pssRegs", 0, 0, 0),
    (170, "Xor_DebugLog", 0, 0, 0),
    (171, "pCmdCtxList", 0, 0, 0),
    (172, "dmaDescMsgs", 0, 0, 0),
    (173, "Nei", 0, 0, 0),
    (174, "iCmdPtrList", 0, 0, 0),
    (175, "PsrInfo", 0, 0, 0),
    (176, "nandTrimMgrInfo", 0, 0, 0),
    (177, "band_SeqInfo", 0, 0, 0),
    (178, "mrr_eventCounters", 0, 0, 0),
    (179, "mrr_refCache", 0, 0, 0),
    (180, "XORRecovery", 0, 0, 0),
    (181, "band_EraseInfo", 0, 0, 0),
    (182, "band_InvalidityInfo", 0, 0, 0),
    (183, "band_LinkedList", 0, 0, 0),
    (184, "band_PageCount", 0, 0, 0),
    (185, "bootProfileDRAM", 0, 0, 0),
    (186, "runningStatus", 0, 0, 0),
    (187, "InternalDataCmdDescPool", 0, 0, 0),
    (188, "band_EbCount", 0, 0, 0),
    (189, "band_StripeCount", 0, 0, 0),
    (190, "xorDebugStats", 0, 0, 0),
    (191, "SlowCtx", 0, 0, 0),
    (192, "bandPweInfo", 0, 0, 0),
    (193, "ProgStream", 0, 0, 0),
    (194, "PrefetchData", 0, 0, 0),
    (195, "SlowCtxDataArray", 0, 0, 0),
    (196, "NandChannelRegsDump", 0, 0, 0),
    (197, "WsmBandAbortLog", 0, 0, 0),
    (198, "band_State", 0, 0, 0),
    (199, "nplFaultInfo", 0, 0, 0),
    (200, "npsRegs", 0, 0, 0),
    (201, "dmtRegs", 0, 0, 0),
    (202, "Replay", 0, 0, 0),
    (203, "band_isCleanBand", 0, 0, 0),
    (204, "band_isDefragLockedForNandError", 0, 0, 0),
    (205, "band_isDefragLockedUntilCtxSave", 0, 0, 0),
    (206, "band_isXorEnabled", 0, 0, 0),
    (207, "InternalDataCmdDescFree", 0, 0, 0),
    (208, "dynamicWindow", 0, 0, 0),
    (209, "fwUpdState", 0, 0, 0),
    (210, "tbufInfo", 0, 0, 0),
    (211, "mrr_audit", 0, 0, 0),
    (212, "capTestInfo", 0, 0, 0),
    (213, "CtxRestoreTime", 0, 0, 0),
    (214, "SystemInfo", 0, 0, 0),
    (215, "mailBoxesToSave", 0, 0, 0),
    (216, "dramEccInfo", 0, 0, 0),
    (217, "LLFFormatProgress", 0, 0, 0),
    (218, "nplMmioInfo", 0, 0, 0),
    (219, "channelTimeout", 0, 0, 0),
    (220, "indConfig", 0, 0, 0),
    (221, "nplErrInfo", 0, 0, 0),
    (222, "SafeShutdownInfo", 0, 0, 0),
    (223, "nplCount", 0, 0, 0),
    (224, "PliCapInfo", 0, 0, 0),
    (225, "InitStateCoreSync", 0, 0, 0),
    (226, "LLFFormatProgressHost", 0, 0, 0),
    (227, "nplCore0Info", 0, 0, 0),
    (228, "nplCore1Info", 0, 0, 0),
    (229, "dmt_register_base", 0, 0, 0),
    (230, "nplTransInfo", 0, 0, 0),
    (231, "PMIC", 0, 0, 0),
    (232, "core0ChildMailboxItem", 0, 0, 0),
    (233, "core1ChildMailboxItem", 0, 0, 0),
    (234, "dlmRegs", 0, 0, 0),
    (235, "dmtDebug0", 0, 0, 0),
    (236, "dmtDebug1", 0, 0, 0),
    (237, "dmtDebug2", 0, 0, 0),
    (238, "REGS_NPL", 0, 0, 0),
    (239, "Xor_DebugLogIndex", 0, 0, 0),
    (240, "telemetry", 0, 0, 0),
    (241, "PliSideTracePayload", 0, 0, 0),
    (242, "SpiFlash", 0, 0, 0),
    (243, "PliSideTraceCoreData", 0, 0, 0),
    (244, "pliCriticalSectionStartAddr", 0, 0, 0),
    (245, "pliCoreSpecificFlags", 0, 0, 0),
    (246, "pssExtRegs", 0, 0, 0),
    (247, "nvmeFeatures", 0, 0, 0),
    (248, "bridgeInfo", 0, 0, 0),
    (249, "ERROR_249", 0, 0, 0),
    (250, "BridgeStatus", 0, 0, 0),
    (251, "nplInfoState", 0, 0, 0),
    (252, "NplCQueueState", 0, 0, 0),
    (253, "nplInfo", 0, 0, 0),
    (254, "NplSQueueState", 0, 0, 0),
    (255, "NplMailboxState", 0, 0, 0),
    (256, "NplCQueueRegisters", 0, 0, 0),
    (257, "NplSQueueRegisters", 0, 0, 0),
    (258, "DefragHistoryPart", 0, 0, 0),
    (259, "NLOG_ID", 0, 0, 0),
    (260, "NLOG_TEST", 0, 0, 0),
    (261, "NLOG_TC", 0, 0, 0),
    (262, "NLOG_DEBUG", 0, 0, 0),
    (263, "NLOG_TEMP", 0, 0, 0),
    (264, "NLOG_15M", 0, 0, 0),
    (265, "NLOG_10D", 0, 0, 0),
    (266, "NLOG_HOST", 0, 0, 0),
    (267, "NLOG_BG", 0, 0, 0),
    (268, "NLOG_UNIQUE", 0, 0, 0),
    (269, "NLOG_SYS", 0, 0, 0),
    (270, "NLOG_ERROR", 0, 0, 0),
    (271, "NLOG_PLI", 0, 0, 0),
    (272, "NLOG_IBM", 0, 0, 0),
    (273, "NLOG_STATS", 0, 0, 0),
    (274, "NLOG_TSTATS", 0, 0, 0),
    (275, "NLOG_HFR", 0, 0, 0),
    (276, "NLOG_EHOST", 0, 0, 0),
    (277, "NLOG_WARN", 0, 0, 0),
    (278, "NLOG_RARE", 0, 0, 0),
    (279, "NLOG_THERM", 0, 0, 0),
    (280, "NLOG_MRRf", 0, 0, 0),
    (281, "NLOG_UEC", 0, 0, 0),
    (282, "NLOG_TRIM", 0, 0, 0),
    (283, "NLOG_MRRs", 0, 0, 0),
    (284, "NLOG_NEI", 0, 0, 0),
    (285, "NLOG_DM", 0, 0, 0),
    (286, "NLOG_VAL", 0, 0, 0),
    (287, "NLOG_OPAL", 0, 0, 0),
    (288, "NLOG_IRQ", 0, 0, 0),
    (289, "NplMailboxRegisters", 0, 0, 0),
    (290, "powerGov_Fconfig", 0, 0, 0),
    (291, "pwgSysParam", 0, 0, 0),
    (292, "powerGov_ThrottleCounters", 0, 0, 0),
    (293, "telemetryAPLDataArea1Reserve", 0, 0, 0),
    (294, "telemetryAPLDataArea2Reserve", 0, 0, 0),
    (295, "telemetryAPLDataArea3Reserve", 0, 0, 0),
    (296, "telemetryObjectDAValidation", 0, 0, 0),
    (297, "fConfigStream", 0, 0, 0),
    (298, "SdlSGRB_REGS", 0, 0, 0),
    (299, "SdlCP_REGS", 0, 0, 0),
    (300, "SdlSDMA_RD_RD", 0, 0, 0),
    (301, "SdlSDMA_WR_REGS", 0, 0, 0),
    (302, "SdlLYNX_LINK_REGS", 0, 0, 0),
    (303, "SdlSata_Pal_REGS", 0, 0, 0),
    (304, "SdlSataTransportStateInfo", 0, 0, 0),
    (305, "SdlTransportInfo", 0, 0, 0),
    (306, "SdlSramCmdDescBuff", 0, 0, 0),
    (307, "SdlDramDescBuff", 0, 0, 0),
    (308, "SdliCmdShadowCopies", 0, 0, 0),
    (309, "SdlSectorDmaDescArray", 0, 0, 0),
    (310, "SdlCmdHistoryDepth", 0, 0, 0),
    (311, "SdlInterDeviceCmd", 0, 0, 0),
    (312, "SdlInterDeviceCmdHistory", 0, 0, 0),
    (313, "NLOG_READPIPE_ID", 0, 0, 0),
    (314, "NLOG_READPIPE_TEST", 0, 0, 0),
    (315, "NLOG_READPIPE_TC", 0, 0, 0),
    (316, "NLOG_READPIPE_DEBUG", 0, 0, 0),
    (317, "NLOG_READPIPE_TEMP", 0, 0, 0),
    (318, "NLOG_READPIPE_15M", 0, 0, 0),
    (319, "NLOG_READPIPE_10D", 0, 0, 0),
    (320, "NLOG_READPIPE_HOST", 0, 0, 0),
    (321, "NLOG_READPIPE_BG", 0, 0, 0),
    (322, "NLOG_READPIPE_UNIQUE", 0, 0, 0),
    (323, "NLOG_READPIPE_SYS", 0, 0, 0),
    (324, "NLOG_READPIPE_ERROR", 0, 0, 0),
    (325, "NLOG_READPIPE_PLI", 0, 0, 0),
    (326, "NLOG_READPIPE_IBM", 0, 0, 0),
    (327, "NLOG_READPIPE_STATS", 0, 0, 0),
    (328, "NLOG_READPIPE_TSTATS", 0, 0, 0),
    (329, "NLOG_READPIPE_HFR", 0, 0, 0),
    (330, "NLOG_READPIPE_EHOST", 0, 0, 0),
    (331, "NLOG_READPIPE_WARN", 0, 0, 0),
    (332, "NLOG_READPIPE_RARE", 0, 0, 0),
    (333, "NLOG_READPIPE_THERM", 0, 0, 0),
    (334, "NLOG_READPIPE_MRRf", 0, 0, 0),
    (335, "NLOG_READPIPE_UEC", 0, 0, 0),
    (336, "NLOG_READPIPE_TRIM", 0, 0, 0),
    (337, "NLOG_READPIPE_MRRs", 0, 0, 0),
    (338, "NLOG_READPIPE_NEI", 0, 0, 0),
    (339, "NLOG_READPIPE_DM", 0, 0, 0),
    (340, "NLOG_READPIPE_VAL", 0, 0, 0),
    (341, "NLOG_READPIPE_OPAL", 0, 0, 0),
    (342, "NLOG_READPIPE_IRQ", 0, 0, 0),
    (343, "NLOG_DCTV", 0, 0, 0),
    (344, "NLOG_STM", 0, 0, 0),
    (345, "NLOG_MI", 0, 0, 0),
    (346, "NLOG_IO", 0, 0, 0),
    (347, "NLOG_BGF", 0, 0, 0),
    (348, "NLOG_PMIC", 0, 0, 0),
    (349, "NLOG_XPT", 0, 0, 0),
    (350, "NLOG_READPIPE_DCTV", 0, 0, 0),
    (351, "NLOG_READPIPE_STM", 0, 0, 0),
    (352, "NLOG_READPIPE_MI", 0, 0, 0),
    (353, "NLOG_READPIPE_IO", 0, 0, 0),
    (354, "NLOG_READPIPE_BGF", 0, 0, 0),
    (355, "NLOG_READPIPE_PMIC", 0, 0, 0),
    (356, "NLOG_READPIPE_XPT", 0, 0, 0),
    (359, "telemNANDFwBuildInfo", 0, 0, 0),
    (360, "telemetryHostTime", 0, 0, 0),
    (361, "telem3DXPFwBuildInfo", 0, 0, 0),
    (362, "NLOG_READPIPE_SECR", 0, 0, 0),
    (363, "NLOG_SECR", 0, 0, 0),
    (364, "telemetryDataArea1TestStructure", 0, 0, 0),
    (365, "telemetryDataArea2TestStructure", 0, 0, 0),
    (366, "telemetryDataArea3TestStructure", 0, 0, 0),
    (368, "telemetryOemDataMapHeader", 0, 0, 0),
    (369, "ThermalTelemetry", 0, 0, 0),
    (370, "transportStateInfoSATA", 0, 0, 0),
    (371, "transportStateInfoCTL1_SBank", 0, 0, 0),
    (372, "transportStateInfoCTL1_DBank_e", 0, 0, 0),
    (373, "transportStateInfoCTL2_SBank_e", 0, 0, 0),
    (374, "transportStateInfoCTL2_DBank", 0, 0, 0),
    (376, "counters", 0, 0, 0),
    (382, "iNQ", 0, 0, 0),
    (397, "CtxSave", 0, 0, 0),
    (65435, "telemetryObjectSpecialId", 0, 0, 0),
    (65436, "telemetryObjectIntelVUToc", 0, 0, 0),
    (65437, "telemetryObjectBlockAlignmentPad", 0, 0, 0),
    (65438, "telemetryObjectHIDataBlob", 0, 0, 0),
    (65439, "telemetryObjectIntfHeader", 0, 0, 0),
    (65440, "telemetryObjectHIBlobHeader", 0, 0, 0),
    (1000000, "geom", 0, 0, 0),
    (1000010, "dieMap", 0, 0, 0),
    (1000020, "Pli", 0, 0, 0),
    (1000030, "PliSlice", 0, 0, 0),
    (1000040, "throttle", 0, 0, 0),
    (1000050, "DeviceSelfTestLog", 0, 0, 0),
    (1000060, "LpTransitionLog", 0, 0, 0),
    (1000070, "LpTransitionStatsLog", 0, 0, 0),
    (1000080, "LpConfiguration", 0, 0, 0),
    (1000090, "transportStateInfo", 0, 0, 0),
    (1000100, "NPL_REG_GRB_NPLECTL_R", 0, 0, 0),
    (1000110, "NPL_REG_CSTS_R", 0, 0, 0),
    (1000120, "NPL_REG_CC_R", 0, 0, 0),
    (1000130, "dataLayout", 0, 0, 0),
    (1000140, "channelMap", 0, 0, 0),
    (1000150, "dieDataLog", 0, 0, 0),
    (1000160, "sim", 0, 0, 0),
    (1000170, "eccErrorsLog", 0, 0, 0),
    (1000180, "mediaErrLog", 0, 0, 0),
    (1000190, "SlowCtxRebuild", 0, 0, 0),
    (1000200, "DieOfflineDieStats", 0, 0, 0),
    (1000210, "DieInfoExt", 0, 0, 0),
    (1000220, "smart", 0, 0, 0),
    (1000230, "thermalThrottle", 0, 0, 0),
    (1000240, "powerThrottle", 0, 0, 0),
    (1000500, "nlogBuffers", 0, 0, 0),
    (1000510, "nlog", 0, 0, 0),
    (4294967293, "defaultID", 0, 0, 0),
    (4294967294, "unknownUniqueIdentifier", 0, 0, 0),
]

elementObjId = 0
elementObjName = 1
elementMajorRev = 2
elementMinorRev = 3
elementSize = 4
eventDumpEuid = 4

class ParserObjectMap(object):

    def __init__(self):
        self.nlogList = []
        self.eventdumpNumber = [0,0,0,0]
        self.telemetryValidationEUID = 0xFFFFFFFF
        self.telemetrySpecialId = 0xFFFFFFFF
        self.telemetryApl1Id = 0xFFFFFFFF
        self.telemetryApl2Id = 0xFFFFFFFF
        self.telemetryApl3Id = 0xFFFFFFFF

        for entry in TELEMETRYLIST:
            name = entry[elementObjName]
            if ((name[:4] == "NLOG") or (name == "Nlog")):
                OutputLog.DebugPrint(5, format("Adding objectId: %d, %s to the nlog list" % (entry[elementObjId], entry[elementObjName])))
                self.nlogList.append(entry[elementObjId])

            if (name == "telemetryObjectDAValidation"):
                OutputLog.DebugPrint(5, format("Setting validation objectId: %d" % (entry[elementObjId])))
                self.telemetryValidationEUID = entry[elementObjId]

            if (name == "telemetryObjectSpecialId"):
                OutputLog.DebugPrint(5, format("Setting special objectId: %d" % (entry[elementObjId])))
                self.telemetrySpecialId = entry[elementObjId]

            if (name == "telemetryAPLDataArea1Reserve"):
                OutputLog.DebugPrint(5, format("Setting APL reserve area 1 objectId: %d" % (entry[elementObjId])))
                self.telemetryApl1Id = entry[elementObjId]

            if (name == "telemetryAPLDataArea2Reserve"):
                OutputLog.DebugPrint(5, format("Setting APL reserve area 2 objectId: %d" % (entry[elementObjId])))
                self.telemetryApl2Id = entry[elementObjId]

            if (name == "telemetryAPLDataArea3Reserve"):
                OutputLog.DebugPrint(5, format("Setting APL reserve area 3 objectId: %d" % (entry[elementObjId])))
                self.telemetryApl3Id = entry[elementObjId]
        return

    def findEUIDParser(self, objectEUID, majorVersion, minorVersion):
        for entry in TELEMETRYLIST:
            if ((entry[elementObjId] == objectEUID) and (entry[elementMajorRev] == majorVersion) and (entry[elementMinorRev] == minorVersion)):
                parserName = str(entry[elementObjName])+"_V"+str(majorVersion)+"_"+str(minorVersion)+"_struct"
                return parserName         # replace with appropriate data once it's available

        return None

    def findEUID(self, objectEUID, majorVersion, minorVersion):
        for entry in TELEMETRYLIST:
            if ((0 == entry[elementMajorRev]) and (entry[elementObjId] == objectEUID)):
                return entry[elementObjId], entry[elementObjName], entry[elementMajorRev], entry[elementMinorRev], entry[elementSize]
            elif ((entry[elementObjId] == objectEUID) and (entry[elementMajorRev] == majorVersion) and (entry[elementMinorRev] == minorVersion)):
                return entry[elementObjId], entry[elementObjName], entry[elementMajorRev], entry[elementMinorRev], entry[elementSize]

        return objectEUID, str(objectEUID), 0, 0, 0

    def isValidationObject(self, objectEUID):
        if(self.telemetryValidationEUID == objectEUID):
            return True
        else:
            return False

    def isNlogObject(self, objectEUID):
        if (len(self.nlogList) > 0):
            if (objectEUID in self.nlogList):
                return True
        return False

    def isSpecialId(self, objectEUID):
        if(objectEUID >= self.telemetrySpecialId):
            return True
        else:
            return False

    def tostr(self):
        retstr = "Nlog ID List: "+str(self.nlogList)+"\n"
        retstr += "Validation ID: "+str(self.telemetryValidationEUID)+"\n"
        retstr += "Special ID Marker: "+str(self.telemetrySpecialId)+"\n"
        return retstr

    def GetEUIDHumanName(self, objectEUID, objectMajor, objectMinor):
        """
        Convert the EUID value
        """
        objectId, objectName, majorRev, minorRev, size = self.findEUID(objectEUID, objectMajor, objectMinor)
        return objectName

    def GetEUIDFileName(self, objectEUID, objectMajor, objectMinor, outFileBaseName, objectCpuNumber):
        """
        Convert the EUID value
        """
        humanName = self.GetEUIDHumanName(objectEUID, objectMajor, objectMinor)
        outputFileName = outFileBaseName+"_CORE"+str(objectCpuNumber)+"_"+humanName+".bin"
        return outputFileName

    def GetAPLReservedFileName(self, outFileBaseName="APL", dataAreaNumber=3):
        """
        Get the APL reserved area file name
        """
        outputFileName = outFileBaseName+"_NLOG_APL_AREA"+str(dataAreaNumber)+".bin"
        if ((dataAreaNumber < 1) or (dataAreaNumber > 3)):
            OutputLog.Warning(format("Unknown APL data area %d" % (dataAreaNumber)))
        if (dataAreaNumber == 1):
            retId = self.telemetryApl1Id
        elif (dataAreaNumber == 2):
            retId = self.telemetryApl2Id
        elif (dataAreaNumber == 3):
            retId = self.telemetryApl3Id
        else:
            retId = 0xFFFFFFFF
        return retId, outputFileName

    def CheckObjectHeader(self, objectEUID, majorVersion, minorVersion, dataSize, dataAreaNumber, objectOffset):
        """
        Check the read object header against the map expected values
        """
        returnStatus = True
        objectId, objectName, objMajorRev, objMinorRev, objSize = self.findEUID(objectEUID, majorVersion, minorVersion)
        if ((0 != objMajorRev) and (0 != objSize)):
            if((objMajorRev != majorVersion) or (objMinorRev != minorVersion) or (objSize != dataSize)):
                validationErrorStr = format("Object header mismatch, ID=%d, data area %d\n" % (objectEUID, dataAreaNumber))
                validationErrorStr += format("         expected MajorVer: %d, MinorVer: %d, Size: %d\n" % (objMajorRev, objMinorRev, objSize))
                validationErrorStr += format("         read     MajorVer: %d, MinorVer: %d, Size: %d" % (majorVersion, minorVersion, dataSize))
                OutputLog.Warning(validationErrorStr)
        elif (0 != objMajorRev):
            if((objMajorRev != majorVersion) or (objMinorRev != minorVersion)):
                print ("\nVALIDATION ERROR!!! Object header mismatch, ID=%d, data area %d" % (objectEUID, dataAreaNumber))
                print ("   expected MajorVer: %d, MinorVer: %d" % (objMajorRev, objMinorRev))
                print ("   read     MajorVer: %d, MinorVer: %d, Size: %d" % (majorVersion, minorVersion, dataSize))
                returnStatus = False
        elif (objectEUID >= self.telemetrySpecialId):
            OutputLog.Warning(format("Special ObjectID %d found in TOC at offset %u in data area %d\n" % (objectEUID, objectOffset, dataAreaNumber)))
            returnStatus = False

        return returnStatus

    def GetEventNumber(self, objectEUID, mediaBankId):
        if (objectEUID == eventDumpEuid):
            eventNumber = self.eventdumpNumber[mediaBankId]
            self.eventdumpNumber[mediaBankId] = eventNumber + 1
            return eventNumber
        else:
            return -1

    def ParseObjectData(self, objectEUID, majorVersion, minorVersion, inputParseName, coreNumber, eventDumpNumber, outFileBaseName):
        """
        Call the appropriate parser for the object ID
        """
        objectParser = self.findEUIDParser(objectEUID, majorVersion, minorVersion)
        if(objectParser is not None):
            # Add the parser call once it's setup
            OutputLog.DebugPrint(3, "No Parser yet")

        return True

    def ParseNlogData(self, nlogParseList, outFileBaseName):
        if (nlogParseList is not None):
            # @todo Call the real nlog parser
            nlogTextFileName = outFileBaseName+"_NLOG_FILE_LIST.txt"
            nlogListFile = openWriteFile(nlogTextFileName, True)

            if(nlogListFile is not None):
                for nlogFile in nlogParseList:
                    nlogListFile.write(str("\""+nlogFile+"\",\n"))
                nlogListFile.close()


