#!/usr/bin/python3
# -*- coding: utf-8 -*-
# *****************************************************************************/
# * Authors: Joseph Tarango, Randal Eike
# *****************************************************************************/
"""
Brief:
    nlogTriageBase.py - Base object for nlog triage

Description:
    Base class for nlog triage objects

Classes:
    pssDebugTraceTriage.
"""


class nlogTriageBase(object):
    """
    Nlog triage base object
    """
    errorLevel = 0
    warningLevel = 1
    information = 2

    def __init__(self, triageName, TOOL_VERSION):
        self.versionString = format("%s version %4.2f\n" % (triageName, TOOL_VERSION))
        self.messageLog = [self.versionString]
        self.hostMessage = None

    def _message(self, level, formatStr, parameters = None):
        if (parameters is None): msgstr = formatStr
        else: msgstr = format(formatStr % parameters)
            
        if (level <= nlogTriageBase.errorLevel): message = format("ERROR: %s" % (msgstr))
        elif (level <= nlogTriageBase.warningLevel):  message = format("Warning: %s" % (msgstr))
        else: message = format("Information: %s" % (msgstr))

        # track the messages in the list
        self.messageLog.append(message)

        # track all the messages from this state transition
        if (self.hostMessage is None): self.hostMessage = message
        else: self.hostMessage = self.hostMessage+"\n"+message

    def _resetMesageLog(self):
        self.hostMessage = None
        del self.messageLog[0:]
        self.messageLog = [self.versionString]

    def _timestamp(self, time):
        mins, seconds = divmod(time, 60)
        hours, mins = divmod(mins, 60)
        return "%9d:%02d:%011.8f" % (hours, mins, seconds)

    def getVersion(self):
        return self.versionString

    def updateTime(self, seconds):
        pass

    def checkEvents(self):
        """
        Check the nlog tuple list for illegal PSS state transitions

        @return list of strings for issues found
        """
        return self.messageLog

    def addNlogEvent(self, formatStr, params, tsSeconds, coreId):
        """
        Determine if this a pss debug trace nlog entry and record the state transition 
        in the list if it is

        @param formatStr - nlog format string
        @param params - nlog associated parameter tuple
        @param tsSeconds - nlog timestamp in seconds (floating point value)
        @param coreId - Core number for the NLOG
        """

        # Return any messages generated by this event
        return self.hostMessage

